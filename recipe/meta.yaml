{% set versions = {
    "6.32.16": "f26546ba7a09a41d491541312f4d115e7eccf250bd7f9e8aee9168cda0aa1ba6",
    "6.34.10": "5b4cc60867d7f01902c3bb05a2f3e3cf9808e3a89ab139062751a3a5b375253e",
    "6.36.04": "65a246d2578d2f04f7ad400a26cfc6c7c9c19878434a3d8f4d0bcf7deec4f2ec"
} %}

{% set version = (environ.get('COMMIT_VERSION') or (versions.keys()|list)[0]) | string %}
{% set major, minor, patch = version.split('.') | map('int') %}
{% set pkg_name = (environ.get('ANACONDA_PACKAGE', "root")|string|lower) %}
{% set ana_ver  = (environ.get('ANACONDA_VERSION', version)|replace("-", ".")) %}

{% set root_cxx_standard = {
    "6.32.16": "17",
    "6.34.10": "20",
    "6.36.04": "20",
} %}

{% set python_version = {
    "6.32.16": "3.10",
    "6.34.10": "3.12",
    "6.36.04": "3.12"
} %}

{% set gnu_versions = {
    "6.32.16": "14",
    "6.34.10": "15",
    "6.36.04": "15"
} %}
{% set _gnu_major = gnu_versions.get(version, "") %}
{% set gnu_pin = (" " + _gnu_major + ".*") if _gnu_major else "" %}

{% set clang_versions = {
    "6.32.16": "16.0.6",
    "6.34.10": "18.1.8",
    "6.36.04": "18.1.8"
} %}

{% set clang_patches = {
    "6.32.16": "63202",
    "6.34.10": "63406",
    "6.36.04": "63604"
} %}

{% set clang_version = clang_versions.get(version) %}
{% set clang_patches_version = "root_"+(clang_patches.get(version)) %}

{% set builtin_pyroot = True %}
{% set builtin_clang  = False %}

package:
  name: {{ pkg_name }}
  version: {{ ana_ver }}

source:
  url: "https://github.com/root-project/root/archive/refs/tags/v{{ version|replace('.', '-') }}.tar.gz"
  {% if versions.get(version) %}
  sha256: {{ versions.get(version) }}
  {% endif %}
  patches:
    - patches/root-x.xx.xx_cling-runtime-sysroot.patch
    - patches/0001-Patch-for-apple-silicon.patch
    - patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch
    - patches/0001-Hackily-fix-cross-compilation.patch
    - patches/0002-Debugging.patch
    - patches/0001-Remove-bad-check-on-SDK-for-std_darwin.MacOSX14.2.sd.patch # [osx]
    - patches/0001-std_darwin.modulemap-Remove-headers-for-MacOSX15.0.s.patch # [osx]
    - patches/0002-Remove-cocoa-afterimage-overrides.patch # [osx]
    - patches/0001-Detect-which-ar-binary-should-be-used-to-build-libAf.patch
    - patches/0001-Don-t-include-RootCPack.patch
    {% if version < "6.36" %}
    - patches/0001-Enforce-fail-on-missing-with-afterimage-dependencies.patch
    - patches/0001-Hacks.patch
    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]
    - patches/0001-Avoid-linking-TPython-against-libPython.patch  # [osx]
    - patches/0001-Don-t-try-to-generate-hsimple.root-when-cross-compil.patch  # [build_platform != target_platform]
    - 0002-HACK-Support-overriding-triplet-used-by-cling.patch  # [build_platform != target_platform]
    - patches/0001-veccore-jobserver-issue.patch
    {% endif %}
    {% if version < "6.32.10" %}
    - patches/0001-Reset-CMAKE-module-path-for-interpreter.patch
    - patches/0001-clad-jobserver-issue.patch
    - patches/disable-hsimple.root
    - patches/0001-force-one-modulemap-for-darwin.patch # [osx]
    {% endif %}

# Only keep script_env at top-level; make every entry self-contained.
build:
  script_env:
    - ROOT_VERSION={{ version }}
    - ROOT_VERSION_MAJOR={{ major }}
    - ROOT_VERSION_MINOR={{ minor }}
    - ROOT_VERSION_PATCH={{ patch }}
    - ROOT_CXX_STANDARD={{ root_cxx_standard.get(version) }}
    - clang_version={{ clang_version }}
    - clang_patches_version={{ clang_patches_version }}
    - ROOT_CONDA_BUILTIN_PYROOT={{ "true" if builtin_pyroot else "false" }}
    - ROOT_CONDA_BUILTIN_CLANG={{ "true" if builtin_clang else "false" }}
    - ROOT_CONDA_BUILD_TYPE={{ environ.get("ROOT_CONDA_BUILD_TYPE","") }}

requirements:  # (keep empty at top-level to avoid bleed; per-output requirements defined below)
  build: []
  host: []
  run: []

outputs:
  # =========================
  # 1) REAL ROOT PACKAGE
  # =========================
  - name: {{ pkg_name }}
    version: {{ ana_ver }}
    build:
      string: "py{{ python_version.get(version).replace('.', '') }}_gcc{{ gnu_versions.get(version).replace('.', '') }}"
      run_exports:
        - {{ pin_compatible(pkg_name, max_pin='x.x') }}
      files:
        include:
          - "**"
        exclude:
          - LICENSE
          - README/**
      ignore_prefix_files:
        - lib/*.pcm
        - etc/allDict.cxx.pch
      ignore_run_exports_from:
        - clangdev
        - xorg-libx11
        - xorg-libxft
        - xorg-libxext
        - xorg-libxpm
        - xorg-libxrender
        - xorg-libxt
        - gsl
        - zlib
        - davix
        - cfitsio
    script: build.sh
    requirements:
      build:
        - {{ compiler('c') }}{{ gnu_pin }}
        - {{ compiler('cxx') }}{{ gnu_pin }}
        - {{ compiler('fortran') }}{{ gnu_pin }}
        - {{ stdlib("c") }}
        - autoconf
        - cmake
        - git
        - pkg-config
        - sed
        - make
        - ninja
        {% if version >= "6.34" %}
        - zeromq
        {% endif %}
        {% if linux or osx %}
        - gnuconfig
        {% endif %}
        {% if build_platform != target_platform %}
        - cross-python_{{ target_platform }}
        - python {{ python_version.get(version) }}.* *_cpython
        - numpy
        - xxhash
        - zlib
        - zstd
        - freetype
        - liblzma-devel
        {% if not osx %}
        {% if version < "6.34" %}
        - llvm {{ clang_version }}.*
        - llvmdev {{ clang_version }}.*
        {% else %}
        - llvm {{ clang_version }}.* {{ clang_patches_version }}*
        - llvmdev {{ clang_version }}.* {{ clang_patches_version }}*
        {% endif %}
        - llvm-openmp {{ clang_version }}.*
        - clangdev {{ clang_version }}.* {{ clang_patches_version }}*
        {% endif %}
        {% endif %}
        - libgcc={{ gnu_pin }}
        - libgcc-ng={{ gnu_pin }}
        - libstdcxx={{ gnu_pin }}
        - libstdcxx-ng={{ gnu_pin }}
        - libgcc-devel_linux-64={{ gnu_pin }}
        - libstdcxx-devel_linux-64={{ gnu_pin }}
        - libgomp={{ gnu_pin }}
      host:
        - {{ compiler('c') }}{{ gnu_pin }}
        - {{ compiler('cxx') }}{{ gnu_pin }}
        - {{ stdlib("c") }}
        - libblas
        - libcblas
        {% if linux %}
        - libglu
        - libgl-devel
        - xorg-xorgproto
        - xorg-libx11
        - xorg-libxau
        - xorg-libxcursor
        - xorg-libxext
        - xorg-libxfixes
        - xorg-libxft
        - xorg-libxpm
        {% endif %}
        - cfitsio
        - davix
        - fftw
        - freetype
        - ftgl
        - gdk-pixbuf
        - giflib
        - glew
        - glib
        - gl2ps
        - graphviz
        - gsl
        - gtest
        - libpng
        - librsvg
        - libtiff
        - libxml2
        - lz4-c
        - nlohmann_json
        - openssl
        - pcre
        - pythia
        - sqlite
        - tbb
        - tbb-devel
        - vector-classes
        - vdt
        - python {{ python_version.get(version) }}.* *_cpython
        - numpy
        - xrootd
        - liblzma-devel
        - xxhash
        - zlib
        - zstd
        {% if version < "6.34" %}
        - cppzmq
        - zeromq
        - zeromq * drafts_*
        {% endif %}
        - libgcc={{ gnu_pin }}
        - libgcc-ng={{ gnu_pin }}
        - libstdcxx={{ gnu_pin }}
        - libstdcxx-ng={{ gnu_pin }}
        - libgcc-devel_linux-64={{ gnu_pin }}
        - libstdcxx-devel_linux-64={{ gnu_pin }}
        - libgomp={{ gnu_pin }}
        {% if not (osx and arch == 'arm64') %}
        {% if version < "6.34" %}
        - llvm {{ clang_version }}.*
        - llvmdev {{ clang_version }}.*
        {% else %}
        - llvm {{ clang_version }}.* {{ clang_patches_version }}*
        - llvmdev {{ clang_version }}.* {{ clang_patches_version }}*
        {% endif %}
        - llvm-openmp {{ clang_version }}.*
        - clangdev {{ clang_version }}.* {{ clang_patches_version }}*
        {% endif %}
      run:
        - python {{ python_version.get(version) }}.* *_cpython
        - numpy
        - {{ compiler('c') }}{{ gnu_pin }}
        - {{ compiler('cxx') }}{{ gnu_pin }}
        - {{ stdlib("c") }}
        - xxhash
        - nlohmann_json
        - cffi
        - graphviz
        - tbb
        - tbb-devel
        {% if linux %}
        - xorg-xorgproto
        - xorg-libx11
        - xorg-libxext
        - xorg-libxpm
        - xorg-libxft
        - libglu
        {% endif %}
        - libgcc={{ gnu_pin }}
        - libgcc-ng={{ gnu_pin }}
        - libstdcxx={{ gnu_pin }}
        - libstdcxx-ng={{ gnu_pin }}
        - libgcc-devel_linux-64={{ gnu_pin }}
        - libstdcxx-devel_linux-64={{ gnu_pin }}
        - libgomp={{ gnu_pin }}
      run_constraints:
        - numba >=0.52
        - cling ==9999
        - root5 ==9999
        - afterimage ==9999
    {% if version < "6.36" %}
    test:
      files:
        - test.cpp
      commands:
        - root -l -b -q -x
        - root -l -b -q -x test.cpp
        - root -b -l -q -x -e '2+3; 0'
        - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'
        - root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error("OpenGL does not appear to be working"); }'
        - root -b -l -q -x "${PREFIX}/tutorials/tree/run_h1analysis.C"
    {% else %}
    tests:
      - python:
          imports:
            - ROOT
            - JupyROOT
          pip_check: false
      - files:
          recipe:
            - test.cpp
            - test_pyroot.py
            - test_roofit_multiprocess.py
        script:
          - python test_pyroot.py
          - python test_roofit_multiprocess.py
          - python ${PREFIX}/tutorials/analysis/dataframe/df038_NumbaDeclare.py
          - root -l -b -q -x test.cpp
          - "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'"
          - "root -b -l -q -x \"${PREFIX}/tutorials/analysis/tree/run_h1analysis.C\""
          - root -l -b -q -x test.cpp++
          - "jupyter-kernelspec list | grep ' root '"
    {% endif %}

  # =========================
  # 2) PURE META GUARD (EMPTY)
  # =========================
  - name: root-guard
    noarch: generic
    script: "echo 'Nothing to do.'"
    requirements:
      run_constrained:
        - root_base ==9999
  # =========================
  # 3) WRAPPER META
  # =========================
  - name: root-framework
    noarch: generic
    script: "echo 'Nothing to do.'"
    requirements:
      run:
        - {{ pkg_name }} {{ ana_ver }}
        - root-guard {{ ana_ver }}

about:
  home: https://root.cern/
  license: LGPL-2.1-only
  summary: "ROOT: analyzing petabytes of data, scientifically."
  description: |
    ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data
    processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other
    languages such as Python and R.

extra:
  recipe-maintainers:
    - meiyasan
