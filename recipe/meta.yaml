{% set versions = {
    "6.34.00": "59e73ae521f49b471917d9ff7193c52a418be9b5b24e94e5f1795ad0f301a9bc",
    "6.32.02": "332c763d2d5eb8a759893453637f24b3900476f73a1a4c7a205f8f7b3104f449"
} %}

{% set version = environ.get('COMMIT_VERSION', None) %}
{% set version = version or versions.keys()|first %}
{% set version = version|string %}

package:
  name: {{ environ.get('ANACONDA_PACKAGE', "root")|string|lower }}
  version: {{ environ.get('ANACONDA_VERSION', version)|replace("-", ".") }}

{% set clang_version = "18.1.0" %}
{% set clang_patches_version = "root_"+(version|replace(".", "")) %}

{% set builtin_pyroot = True %}
{% set builtin_clang = False %}

source:
  url: "https://github.com/root-project/root/archive/refs/tags/v{{ version|replace(".", "-") }}.tar.gz"
  {% if versions.get(version, None) %}
  sha256: {{ versions.get(version) }}
  {% endif %}
  folder: root-source
  patches:
    - patches/root-x.xx.xx_cling-runtime-sysroot.patch
    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]
    - patches/0001-Hacks.patch
    - patches/0001-Patch-for-apple-silicon.patch
    - patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch
    - patches/disable-hsimple.root  # [build_platform != target_platform]
{% if version < "6.34" %}
    - patches/0001-Reset-CMAKE-module-path-for-interpreter.patch
{% endif %}
    - patches/0001-force-one-modulemap-for-darwin.patch  # [osx]
    - patches/0001-Remove-check-for-SDK-version-in-CIFactory.patch  # [osx]
    - patches/0001-avoid-linking-TPython-against-libPython.patch  # [osx]
    - patches/0001-std_darwin.modulemap-Remove-headers-for-MacOSX15.0.s.patch  # [osx]
{% if not builtin_pyroot %}
    - patches/0001-Support-standalone-pyroot.patch
{% endif %}
    - patches/0001-Hackily-fix-cross-compilation.patch

build:
  number: 0
  skip: True  # [win]
  ignore_prefix_files:
    - lib/*.pcm            # [not aarch64]
    # https://github.com/root-project/root/blob/975be1e7647098ee8db5333f0769fb12287d0f75/cmake/modules/RootBuildOptions.cmake#L328-L332
    - etc/allDict.cxx.pch  # [aarch64]
  ignore_run_exports_from:
    - clangdev
  script_env:
    - clang_version={{ clang_version }}
    - clang_patches_version={{ clang_patches_version }}
    {% if builtin_pyroot %}- ROOT_CONDA_BUILTIN_PYROOT=1 {%- endif %}
    {% if builtin_clang %}- ROOT_CONDA_BUILTIN_CLANG=1 {%- endif %}
    {% if "ROOT_CONDA_BUILD_TYPE" in os.environ %}- ROOT_CONDA_BUILD_TYPE {%- endif %}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib("c") }}
    - autoconf
    - cmake
    - git
    - pkg-config
    - sed
    - make
    # Required for OpenGL support
    # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]

  host:
    - {{ compiler('c') }}  # [linux]
    - {{ compiler('cxx') }}  # [linux]
    - {{ stdlib("c") }}
    - libblas
    - libcblas
    - libstdcxx-ng
    - libcxx
    - binutils
    - python
    - numpy
    - afterimage
    - lz4-c
    - xxhash
    - cfitsio
    - gdk-pixbuf
    - giflib
    - freetype
    - gtest
    - libxml2
    - ftgl
    - glew
    - gl2ps
    - glib
    - gsl
    - nlohmann_json
    - pcre2
    - fftw
    - zlib-ng
    - zstd
    - tbb
    - tbb-devel
    - vector-classes
    - vdt
    - libglu
    - xz
    - graphviz
    - pythia8
    - xrootd
    - openssl
    - davix>=0.6.4
    - xorg-libx11  # [linux]
    - xorg-libxau  # [linux]
    - xorg-libxcursor  # [linux]
    - xorg-libxext  # [linux]
    - xorg-libxfixes  # [linux]
    - xorg-libxft  # [linux]
    - xorg-libxpm  # [linux]
{% if not builtin_clang %}
    - llvm {{ clang_version }}  # [not (osx and arm64)]
    - llvmdev {{ clang_version }}  # [not (osx and arm64)]
#{% if version < "6.34" %}
    - clangdev {{ clang_version }} {{ clang_patches_version }}*  # [not (osx and arm64)]
#{% else %}
#    - clangdev {{ clang_version }} # [not (osx and arm64)]
{% endif %}
{% endif %}
{% if builtin_pyroot %}
    - python
    - numpy
{% endif %}
  run:
{% if builtin_pyroot %}
    - python
{% endif %}
    # FIXME: Required to ensure a consistent etc/allDict.cxx.pch
    - libcxx # {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib("c") }}
    - libstdcxx-ng
    - libcxx
    - xxhash
    - nlohmann_json
    - cffi
    - graphviz
    - xorg-libx11  # [linux]
    - xorg-libxext  # [linux]
    - xorg-libxpm  # [linux]
    - xorg-libxft  # [linux]
    - libglu  # [linux]

  run_constrained:
    # Older numba versions have trouble with how LLVM is linked
    - numba >=0.52
    # Items listed here conflict with ROOT
    - cling 9999
    - root5 9999

test:
  files:
    - test.cpp
  commands:
    - root -l -b -q -x
    - root -l -b -q -x test.cpp
    # When testing with -e, explicitly set the return code to zero
    - root -b -l -q -x -e '2+3; 0'
    #- root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'
    # Check the thisroot scripts work
    #- thisroot.sh
    #- thisroot.csh
    #- thisroot.fish
    # Test if OpenGL is working
    #- root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error("OpenGL does not appear to be working"); }'
    # This test will fail due to lack of graphics support but try it anyway
    # It should exit with "TEveException: TEveManager::Create ROOT is running in batch mode."
    #- root -b -l -q -x "${PREFIX}/tutorials/eve/geom_lhcb.C" || true
    # This tutorial uses davix to access a ROOT file over HTTP
    #- root -b -l -q -x "${PREFIX}/tutorials/tree/run_h1analysis.C"
    # FIXME: This test fails on ppc64le for some reason...
    #- XrdSecPROTOCOL=unix python -c "import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())"  # [not ppc64le]
    # This command only works if the compilers are available
    #- root -l -b -q -x test.cpp++
    # Ensure exceptions don't cause the interpreter to exit
    # Expected to fail on apple silicon: https://github.com/root-project/root/issues/7541
    #- echo '.q' | root -e 'sddsa0'  # [not (osx and arm64) and build_platform == target_platform]

extra:
  recipe-maintainers:
    - meiyasan
