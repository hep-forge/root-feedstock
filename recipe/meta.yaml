{% set versions = {
    "6.32.10": "876a498297e9473e4c2d073c099ac6d3a06c5ed5c66d01c0acee5351b78afe08",
    "6.34.10": "5b4cc60867d7f01902c3bb05a2f3e3cf9808e3a89ab139062751a3a5b375253e"
} %}

{% set version = environ.get('COMMIT_VERSION', None) %}
{% set version = version or versions.keys()|first %}
{% set version = version|string %}

{% set major, minor, patch = version.split('.') | map('int') %}

package:
  name: {{ environ.get('ANACONDA_PACKAGE', "root")|string|lower }}
  version: {{ environ.get('ANACONDA_VERSION', version)|replace("-", ".") }}

{% set root_cxx_standard = {
    "6.32.10": "17",
    "6.34.10": "20"
} %}

{% set python_version = {
    "6.32.10": "3.10",
    "6.34.10": "3.12"
} %}

{% set gnu_versions = {
    "6.32.10": "14",
    "6.34.10": "15"
} %}
{% set _gnu_major = gnu_versions.get(version, "") %}
{% set gnu_pin = (" " + _gnu_major + ".*") if _gnu_major else "" %}

{% set clang_versions = {
    "6.32.10": "16.0.6",
    "6.34.10": "18.1.8"
} %}

{% set clang_patches = {
    "6.32.10": "63202",
    "6.34.10": "63406"
} %}

{% set clang_version = clang_versions.get(version) %}
{% set clang_patches_version = "root_"+(clang_patches.get(version)) %}

{% set builtin_pyroot = True %}
{% set builtin_clang = False %}

build:
  number: 0
  string: "py{{ python_version.get(version).replace('.', '') }}_gcc{{ gnu_versions.get(version).replace('.', '') }}"
  ignore_run_exports_from:
    - tbb
    - tbb-devel
    
source:
  url: "https://github.com/root-project/root/archive/refs/tags/v{{ version|replace('.', '-') }}.tar.gz"
  {% if versions.get(version) %}
  sha256: {{ versions.get(version) }}
  {% endif %}
  patches:
    - patches/root-x.xx.xx_cling-runtime-sysroot.patch
    - patches/0001-Hacks.patch
    - patches/0001-Patch-for-apple-silicon.patch
    - patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch
    - patches/0001-Hackily-fix-cross-compilation.patch
    - patches/0002-Debugging.patch
    - patches/0001-Remove-bad-check-on-SDK-for-std_darwin.MacOSX14.2.sd.patch # [osx]
    - patches/0001-std_darwin.modulemap-Remove-headers-for-MacOSX15.0.s.patch # [osx]
    - patches/0001-Enforce-fail-on-missing-with-afterimage-dependencies.patch
    - patches/0002-Remove-cocoa-afterimage-overrides.patch # [osx]
    - patches/0001-Detect-which-ar-binary-should-be-used-to-build-libAf.patch
    - patches/0001-Don-t-include-RootCPack.patch
    # --- Conditionally applied patches ---
    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]
    - patches/0001-Avoid-linking-TPython-against-libPython.patch  # [osx]
    - patches/0001-Don-t-try-to-generate-hsimple.root-when-cross-compil.patch  # [build_platform != target_platform]
    - 0002-HACK-Support-overriding-triplet-used-by-cling.patch  # [build_platform != target_platform]
    - patches/0001-veccore-jobserver-issue.patch
    {% if version < "6.32.10" %}
    - patches/0001-Reset-CMAKE-module-path-for-interpreter.patch
    - patches/0001-clad-jobserver-issue.patch
    - patches/disable-hsimple.root
    - patches/0001-force-one-modulemap-for-darwin.patch # [osx]
    {% endif %}

build:
  script_env:
    - ROOT_VERSION={{ version }}
    - ROOT_VERSION_MAJOR={{ major }}
    - ROOT_VERSION_MINOR={{ minor }}
    - ROOT_VERSION_PATCH={{ patch }}
    - ROOT_CXX_STANDARD={{ root_cxx_standard.get(version) }}
    - clang_version={{ clang_version }}
    - clang_patches_version={{ clang_patches_version }}
    {% if builtin_pyroot %}- ROOT_CONDA_BUILTIN_PYROOT="true" {%- endif %}
    {% if builtin_clang %}- ROOT_CONDA_BUILTIN_CLANG="true" {%- endif %}
    {% if "ROOT_CONDA_BUILD_TYPE" in os.environ %}- ROOT_CONDA_BUILD_TYPE {%- endif %}
  run_exports:
    - {{ pin_compatible('root', max_pin='x.x') }}
  ignore_prefix_files:
    - lib/*.pcm
    - etc/allDict.cxx.pch
  ignore_run_exports_from:
    - clangdev
    - xorg-libx11
    - xorg-libxft
    - xorg-libxext
    - xorg-libxpm
    - xorg-libxrender
    - xorg-libxt
    - gsl
    - zlib
    - davix
    - cfitsio
    - tbb

requirements:
  build:
    - {{ compiler('c') }}{{ gnu_pin }}
    - {{ compiler('cxx') }}{{ gnu_pin }}
    - {{ compiler('fortran') }}{{ gnu_pin }}
    - {{ stdlib("c") }}
    - autoconf
    - cmake
    - git
    - pkg-config
    - sed
    - make
    - ninja
{% if linux or osx %}
    - gnuconfig
{% endif %}
{% if build_platform != target_platform %}
    - cross-python_{{ target_platform }}
    - python {{ python_version }}.* *_cpython
    - numpy
    - xxhash
    - zlib
    - zstd
    - freetype
    - liblzma-devel
{% if not osx %}
{% if major < 6 or (major == 6 and minor < 34) %}
    - llvm {{ clang_version }}.*
    - llvmdev {{ clang_version }}.*
{% else %}
    - llvm {{ clang_version }}.* {{ clang_patches_version }}*
    - llvmdev {{ clang_version }}.* {{ clang_patches_version }}*
{% endif %}
    - llvm-openmp {{ clang_version }}.*
    - clangdev {{ clang_version }}.* {{ clang_patches_version }}*
{% endif %}
{% endif %}

  host:
    - libblas
    - libcblas
{% if linux %}
    - {{ compiler('c') }}{{ gnu_pin }}
    - {{ compiler('cxx') }}{{ gnu_pin }}
    - {{ compiler('fortran') }}{{ gnu_pin }}
    - libglu
    - libgl-devel
    - xorg-xorgproto
    - xorg-libx11
    - xorg-libxau
    - xorg-libxcursor
    - xorg-libxext
    - xorg-libxfixes
    - xorg-libxft
    - xorg-libxpm
{% endif %}
    - {{ stdlib("c") }}
    - cfitsio
    - davix
    - fftw
    - freetype
    - ftgl
    - gdk-pixbuf
    - giflib
    - glew
    - glib
    - gl2ps
    - graphviz
    - gsl
    - gtest
    - libpng
    - librsvg
    - libtiff
    - libxml2
    - lz4-c
    - nlohmann_json
    - openssl
    - pcre
    - pythia
    - sqlite
    - tbb
    - tbb-devel
    - vector-classes
    - vdt
    - python {{ python_version.get(version) }}.* *_cpython
    - numpy
    - xrootd
    - liblzma-devel
    - xxhash
    - zlib
    - zstd
{% if not (osx and arch == 'arm64') %}
{% if major < 6 or (major == 6 and minor < 34) %}
    - llvm {{ clang_version }}.*
    - llvmdev {{ clang_version }}.*
{% else %}
    - llvm {{ clang_version }}.* {{ clang_patches_version }}*
    - llvmdev {{ clang_version }}.* {{ clang_patches_version }}*
{% endif %}
    - llvm-openmp {{ clang_version }}.*
    - clangdev {{ clang_version }}.* {{ clang_patches_version }}*
{% endif %}

  run:
    - python {{ python_version.get(version) }}.* *_cpython
    - numpy
    - {{ compiler('c') }}{{ gnu_pin }}
    - {{ compiler('cxx') }}{{ gnu_pin }}
    - {{ compiler('fortran') }}{{ gnu_pin }}
    - {{ stdlib("c") }}
    - xxhash
    - nlohmann_json
    - cffi
    - graphviz
{% if linux %}
    - xorg-xorgproto
    - xorg-libx11
    - xorg-libxext
    - xorg-libxpm
    - xorg-libxft
    - libglu
{% endif %}

  run_constraints:
    - numba >=0.52
    - cling ==9999
    - root5 ==9999
    - afterimage ==9999

test:
  files:
    - test.cpp
  commands:
    - root -l -b -q -x
    - root -l -b -q -x test.cpp
    - root -b -l -q -x -e '2+3; 0'
    - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'
    - root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error("OpenGL does not appear to be working"); }'
    - root -b -l -q -x "${PREFIX}/tutorials/tree/run_h1analysis.C"

about:
  home: https://root.cern/
  license: LGPL-2.1-only
  summary: "ROOT: analyzing petabytes of data, scientifically."
  description: |
      ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data
      processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other
      languages such as Python and R.

extra:
  recipe-maintainers:
    - meiyasan
